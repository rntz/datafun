* Sketch of paper
1. Lead with faster-fix and how it eg. speeds up transitive closure
   from O(n^2) to O(n).


* Theorems to put in paper
⟦-⟧ : Datafun → Poset is the standard semantics.
⦃-⦄ : Datafun → ΔPoset is the change semantics.
𝓤 : ΔPoset → Poset is the forgetful functor.
For A : ΔPoset, 𝓤A : Poset is the value poset
and ΔA : Poset is the change poset.

1. 𝓤⦃-⦄ = ⟦-⟧
2. Δ⦃A⦄ = ⟦ΔA⟧
3. The logical relations proof.


* Potential examples

1. path(X,Y) ← edge(X,Y)
   path(X,Z) ← edge(X,Y), path(Y,Z)

   1a) how it evaluates in naive Datafun
   1b) why is this bad?
   1c) what you might write in OCaml or Haskell to do this faster manually.
   1d) rewrite OCaml code to expose faster-fix & incremental components
   1e) show what Datafun's φ-transform does to the naive Datafun code

   Show that seminaive evaluation turns this from O(n²?) to O(n) or whatever.

2. Some example which we use to demonstrate connection to Datalog seminaive evaluation. (Sells idea as having more general applicability.)

    2a) Show Datalog version of transitive closure
    2b) how seminaive evaluation of the transitive closure changes the set of known facts over time
    2c) How this corresponds exactly to Datafun version w/ incremental path & faster-fix.

3. Example using functions over relations: Generic transitive closure, & what
   φ-transform does to that.

   3a) Generic transitive closure (see below).
   3b) The φ-transform of it, post-optimisation.
   3c) Explain how this generalizes Datalog's seminaive evaluation.

4. Regular expressions! In two ways. See March 2019 notebook.

** Example 3
type pre-φ: □{ℕ × ℕ} → {ℕ × ℕ}
type post-φ: □({ℕ × ℕ} × {ℕ × ℕ}) → {ℕ × ℕ}

φ(λx. let [edge] = x in fix [λpath. edge ∪ edge • path])
= λx dx.
  let [edge, dedge] = x in
  φ(fix [λpath. edge ∪ edge • path])
= λ[edge, dedge] _. fastfix φ[λpath. edge ∪ edge • path]
= λ[edge, dedge] _.
  fastfix (φ(λpath. edge ∪ edge • path),
           δ(λpath. edge ∪ edge • path))
= λ[edge, dedge] _.
  fastfix (λpath. edge ∪ φ(edge • path),
           λpath dpath. δedge ∪ δ(edge • path))
= λ[edge, dedge] _.
  fastfix (λpath. edge ∪ φ(edge • path),
           λpath dpath. dedge ∪ δ(edge • path))
(with optimizations)
= λ[edge, _] _.
  fastfix ((λpath. edge ∪ φ(edge • path)),
           (λpath dpath. edge • dpath))

fastfix : □((A -> A) × (A × ΔA → ΔA)) → A
fastfix (f,df) = loop ⊥ (f ⊥)
  where loop x dx = if dx ≤ x then x else
                    loop (x ∪ dx) (df x dx)

δ(edge • path)
= δ{(x,z) | (x,y) ∈ edge, (y,z) ∈ path}
= δ(for (x,y ∈ edge) for (y2,z ∈ path) when (y = y2) {(x,z)})
= (for (x,y ∈ dedge)
   let ... in for (y2,z ∈ path) let ... in when (y = y2) {(x,z)})
∪ for (x,y ∈ edge ∪ dedge) let ... in
  δ(for (y2,z ∈ path) when (y = y2) {(x,z)})
= (for (x,y ∈ dedge)
   let ... in for (y2,z ∈ path) let ... in when (y = y2) {(x,z)})
∪ for (x,y ∈ edge ∪ dedge) let ... in
    (for (y2,z ∈ dpath) let ... in when (y = y2) {(x,z)})
  ∪ (for (y2,z ∈ path ∪ dpath) let ... in
     δ(when (y=y2) {(x,z)}))
= (for (x,y ∈ dedge)
   let ... in for (y2,z ∈ path) let ... in when (y = y2) {(x,z)})
∪ for (x,y ∈ edge ∪ dedge) let ... in
    (for (y2,z ∈ dpath) let ... in when (y = y2) {(x,z)})
  ∪ (for (y2,z ∈ path ∪ dpath) let ... in
     if y=y2 then {} else
     when (false) {(x,z)} ∪ {}
= (for (x,y ∈ dedge) for (y2,z ∈ path) when (y = y2) {(x,z)})
∪ for (x,y ∈ edge ∪ dedge)
  for (y2,z ∈ dpath) when (y = y2) {(x,z)}
= (dedge • path) ∪ ((edge ∪ dedge) • dpath)
(because dedge is empty)
= edge • dpath

δ(when (M) N) = if φM then δN else when (δM) φN ∪ δN

δ(for (x in M) N)
= for (x in δM) let dx = 0 x in φN
∪ for (x in φM ∪ δM) let dx = 0 x in δN

φ(for (x in M) N) = for (x in φM) let dx = 0x in φN

4. δ(M ∩ N) ≡ (M ∩ δN) ∪ (δM ∩ N) ∪ (δM ∩ δN)
   if you optimize enough

* Roads not taken
There were a lot of choices we made that could have been made differently. I'd
like to have a section in the paper on them if there's room. In particular, we
could have, in no particular order:

1. Normalized first, then do seminaive transform only on first-order Datafun.

2. Used "change monoids" a la unpublished(?) Picallo & Michael PJ &c paper.

3. Tried to handle nested fixed points. This would involve 2nd and higher
   derivatives; could lazily compute them? Apply Paolo Giarrusso's thesis work?
   We didn't do this because it seems hard and Datalog can't do it.

4. Included a normal incrementalization/derivative transform, not just the
   seminaive incrementalization/derivative transform.

5. Augmented our target language with dependent types (to specify "zero change
   for a value") and quotients to try to make Φ□A more closely model the
   semantics.

6. Used two _separate_ comonads, one for discreteness, one for preventing nested
   fixed points. But then we'd have to think about how they interact! Future
   work?

7. Only stored zero changes for _functions_, not for everything inside a boxed
   type. This seems related to letting Φ(A_eq) = A_eq. Or perhaps having
   separate Δ□ and Δ.

8. We chose to let Δ□A = 1. It's possible letting Δ□A = □ΔA would also work,
   although I'm not sure. For example, then ΔΦ□A = Δ□(ΦA × ΔΦA) = □(ΔΦA × ΔΔΦA),
   which just feels icky. However, it does considerably simplify φ(split e) and
   δ(split e)! eg. δ(split e) = split δe.

9. The finite set type, {-}, can conceptually be separated into F□A, where F is
   the "free semilattice" functor. So why don't we do this - in our semantics at
   least, if not in our syntax?

   This would break our semantics into smaller components; for example, the
   requirement that given (f : Γ × □A → L) we can construct (f^* : Γ × {A} → L)
   can be satisfied by functoriality and tensorial strength of F and its
   initiality property as the free semilattice. It would also simplify our
   typing rules: the intro & elim rules for FA are the same as for {A} but
   monotone where {A} is discrete, neatly separating discreteness from
   "set"-ness.

   Unfortunately, it turns out this separation works in Poset, but not in
   ΔPoset. What is ΔFA? It's really not clear. Since Δ{A} = {A}, we want ΔF□A to
   be something like F□A, but there's no compositional way to do that. We could
   settle for ΔF□A = F□(A × ΔA) if we let ΔFA = F𝕍A and let ⊕ = ∨. But then what
   is the derivative of gen? The obvious one is gen' x dx = gen(x ⊕ dx). But ⊕
   is a *partial* function, so this doesn't work!

   Although it's possible there is some way to make this work, in my experience
   trying to separate {-} into F□ turned out to be a messy maze of dead-ends.

10. Make □A an eqtype. The problem with this is showing that φ(e ∨ f : {□A})
    respects the logical relation, since Φ will add zero change information to
    each element of the set, but a given value may have more than one valid
    zero change. Various possible approaches here.

   OLD UN-UPDATED REASONS:

8. We have finite set types {-} in our syntax, but separate {A} into F□A in our
   semantics. Why not put F directly into our syntax? This simplifies our typing
   rules; it has the same intro & elim as {-} but without getting discreteness
   involved! However, this creates two complications:

   - First, then Φ{A} = ΦF□A = F□(ΦA × ΔΦA). So now our sets carry around extra,
     seemingly unnecessary information. However, this is actually exactly the
     information we need to reconstruct in φ(for ...)! However, we _know_ that
     this extra information is a *zero change*, and our current scheme exposes
     this information to the optimizer (XXX DOES OUR OPTIMIZER USE IT?), while
     this scheme would not make it quite so obvious.

   - Second, letting ↓e be the intro for FA, what is δ↓e? Unlike {e}, it's not
     ⊥, because e *can* change. It's also not ↓δe; this doesn't typecheck,
     because ΔA ≠ A. Instead, the best I can think of is ↓(φe ⊕ δe), (which,
     incidentally, requires defining the ⊕ operator in Datafun). But then what
     is δ{e}? It's

         δ{e} = δ↓[e] = ↓(φ[e] ⊕ δ[e]) = ↓[φe,δe]

     which is annoying, because we _know_ it's safe to let δ{e} = ⊥. So this
     becomes an additional optimization, rather than a consequence of our translation.

   Neither of these are deal-breakers, but they are annoying.

* Syntax sugar / conveniences

sets          → downsets + discreteness
{e₁...eₙ}     → {[e₁]} ∨ ... ∨ {[eₙ]}
discrete case → splitsum
if-then-else  → case & isEmpty
true,false    → {[()]}, ⊥
when          → for & sets of units
(fix x.e)     → fix (box (λx.e))
e₁ = e₂       → box e₁ = box e₂

explain why booleans-as-sets-of-units is helpful
(ie. use "when")
